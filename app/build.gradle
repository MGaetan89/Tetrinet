apply plugin: 'jacoco'
apply plugin: 'com.android.application'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId 'io.tetrinet'
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionCode 1
        versionName '1.0'
        resConfigs rootProject.supportedLanguages
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
        }
    }

    sourceSets {
        androidTest.java.srcDirs = ['src/androidTest/kotlin']
        main.java.srcDirs = ['src/main/kotlin']
        test.java.srcDirs = ['src/test/kotlin']
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
    }
}

// From https://github.com/nenick/android-gradle-template/blob/master/app/build.jacoco-test-report.gradle
task jacocoTestReport(type: JacocoReport /*, dependsOn: ['test'] */) {
    group = 'Reporting'
    description = 'Generates Jacoco coverage reports: XML and HTML'
    //outputs.upToDateWhen { false }

    // use hidden configuration, for details look into JacocoPlugin.groovy
    jacocoClasspath = configurations['androidJacocoAnt']

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${projectDir}/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: projectDir, includes: ['**/*.exec', '**/*.ec'])

    reports {
        csv {
            enabled = false
        }

        html {
            enabled = true
            destination = "${buildDir}/reports/jacoco"
        }

        xml {
            enabled = true
            destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
    }
}

dependencies {
    compile "com.android.support:support-compat:$supportLibraryVersion"
    compile "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    testCompile("com.squareup.assertj:assertj-android:$assertJAndroidVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testCompile "junit:junit:$jUnitVersion"

    androidTestCompile("com.android.support.test:runner:$testSupportLibraryVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.squareup.assertj:assertj-android:$assertJAndroidVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile "junit:junit:$jUnitVersion"
    androidTestCompile "org.mockito:mockito-android:$mockitoVersion"
}
